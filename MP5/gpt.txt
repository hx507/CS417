 
// Create and return a camera object
export function createCamera() {
  const camera = {
    position: [0, 5, 10],
    target: [0, 0, 0],
    up: [0, 1, 0],
    speed: 0.1,
    viewMatrix: new Float32Array(16),
    projectionMatrix: new Float32Array(16)
  };

  updateViewMatrix(camera);
  updateProjectionMatrix(camera);

  return camera;
}

// Update the camera's view matrix based on position, target, and up
function updateViewMatrix(camera) {
  // Use a lookAt function from a library like gl-matrix or write your own
  mat4.lookAt(camera.viewMatrix, camera.position, camera.target, camera.up);
}

// Update the camera's projection matrix (e.g., with a perspective projection)
function updateProjectionMatrix(camera) {
  const fov = Math.PI / 4;
  const aspectRatio = window.innerWidth / window.innerHeight;
  const near = 0.1;
  const far = 1000;

  // Use a perspective function from a library like gl-matrix or write your own
  mat4.perspective(camera.projectionMatrix, fov, aspectRatio, near, far);
}

// Update the camera position based on keys being pressed
export function updateCameraPosition(camera) {
  const forward = vec3.create();
  const right = vec3.create();

  // Calculate the forward and right vectors
  vec3.subtract(forward, camera.target, camera.position);
  vec3.normalize(forward, forward);
  vec3.cross(right, forward, camera.up);
  vec3.normalize(right, right);

  // Check the keysBeingPressed object and move the camera accordingly
  if (window.keysBeingPressed['W']) {
    vec3.scaleAndAdd(camera.position, camera.position, forward, camera.speed);
    vec3.scaleAndAdd(camera.target, camera.target, forward, camera.speed);
  }
  if (window.keysBeingPressed['S']) {
    vec3.scaleAndAdd(camera.position, camera.position, forward, -camera.speed);
    vec3.scaleAndAdd(camera.target, camera.target, forward, -camera.speed);
  }
  if (window.keysBeingPressed['A']) {
    vec3.scaleAndAdd(camera.position, camera.position, right, -camera.speed);
    vec3.scaleAndAdd(camera.target, camera.target, right, -camera.speed);
  }
  if (window.keysBeingPressed['D']) {
    vec3.scaleAndAdd(camera.position, camera.position, right, camera.speed);
    vec3.scaleAndAdd(camera.target, camera.target, right, camera.speed);
  }

  // Update the view matrix with the new position
  updateViewMatrix(camera);
}
